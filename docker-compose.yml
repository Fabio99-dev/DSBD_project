version: '3'

networks:
  my_traffic_network:
    driver: bridge

services:

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - my_traffic_network

  metrics_exporter:
   restart: always
   build:
      context: ./MetricsExporter
      dockerfile: metrics_exporter.Dockerfile
   container_name: metrics_exporter
   depends_on:
      - prometheus
   expose:
      - "8000"
   ports:
      - "8000:8000"
   volumes:
    - /var/run/docker.sock:/var/run/docker.sock
   networks:
    - my_traffic_network  

  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "22181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - my_traffic_network

  kafka:
      restart: always
      image: docker.io/bitnami/kafka:3.3
      ports:
        - "9093:9092"
      volumes:
        - "kafka-volume:/bitnami"
      logging:
        driver: none
      environment: 
        - KAFKA_BROKER_ID=1
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
        - ALLOW_PLAINTEXT_LISTENER=yes
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
        - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
        - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://my.traffic.com:9093
        - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
        - KAFKA_CREATE_TOPICS="PingRoute:1:1,AlertMessage:1:1,MetricRequest:1:1,MetricResponse:1:1"
        - KAFKA_CFG_MESSAGE_MAX_BYTES=20000000
        - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
        - KAFKA_CFG_LOG4J_LOGGERS=
      depends_on:
        - zookeeper
      networks:
        - my_traffic_network

  database:
    container_name: MyTrafficDB
    build:
      context: ./MyTrafficDB
      dockerfile: database.Dockerfile
    volumes:
      - ./MyTrafficDB/mysql-data:/var/lib/mysql  
    ports:
      - "6033:3306"
    networks:
      - my_traffic_network

  database2:
    container_name: RoutesDB
    build:
      context: ./RoutesDB
      dockerfile: database2.Dockerfile
    volumes:
      - ./RoutesDB/mysql-data:/var/lib/mysql    
    ports:
      - "6034:3306"
    networks:
      - my_traffic_network        

  user_manager:
    build:
      context: ./UserManager
      dockerfile: user_manager.Dockerfile
    container_name: user_manager
    depends_on:
      - database
    environment:
      DATABASE_URI: mysql+pymysql://root:toor@MyTrafficDB:3306/MyTrafficDB  
    expose:
      - "3001"
    ports:
      - "3001:3001"
    networks:
      - my_traffic_network

  route_handler:
    restart:
        always
    build:
      context: ./RouteHandler
      dockerfile: route_handler.Dockerfile
    container_name: route_handler
    depends_on:
      - database2
      - kafka
    environment:
      DATABASE_URI: mysql+pymysql://root:toor@RoutesDB:3306/RoutesDB  
    expose:
      - "3002"
    ports:
      - "3002:3002"
    networks:
      - my_traffic_network

  data_analyzer:
    restart:
      always
    build:
      context: ./DataAnalyzer
      dockerfile: data_analyzer.Dockerfile
    container_name: data_analyzer
    depends_on:
      - kafka
    networks:
      - my_traffic_network

  notifier_service:
    restart:
      always
    build:
      context: ./NotifierService
      dockerfile: notifier_service.Dockerfile
    container_name: notifier_service
    depends_on:
      - kafka   
    networks:
      - my_traffic_network   
   
  nginx:
    restart:
      always
    image: nginx:alpine
    container_name: api_gateway_my_traffic
    volumes:
      - ./ApiGateway/api_gateway.conf:/etc/nginx/conf.d/api_gateway.conf
    ports:
      - "8080:80"
    depends_on:
      - user_manager
      - route_handler
      - sla_manager
    networks:
      - my_traffic_network

  sla_manager:
    restart:
      always
    build:
      context: ./SlaManager
      dockerfile: sla_manager.Dockerfile
    container_name: sla_manager
    ports:
      - "5000:5000"
    depends_on:
      - database3
      - prometheus 
    networks:
      - my_traffic_network
      
  database3:
    container_name: SlaManagerDB
    build:
      context: ./SlaManagerDB
      dockerfile: SlaManagerDB.Dockerfile
    volumes:
      - ./SlaManagerDB/mysql-data:/var/lib/mysql 
    ports:
      - "6035:3306"
    networks:
      - my_traffic_network
 

volumes:
    kafka-volume:
    zookeeper-volume:
